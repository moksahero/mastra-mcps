import express from "express";
import type { Request, Response } from "express";
import cors from "cors";
import dotenv from "dotenv";
import { createOpenAI } from "@ai-sdk/openai";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { Agent } from "@mastra/core/agent";
import { MCPClient } from "@mastra/mcp";
import { z } from "zod";
dotenv.config();

const schema = z.object({
  summary: z.string(),
  content: z.string(),
});

async function main() {
  const app = express();
  app.use(cors());
  app.use(express.json());

  const mcp = new MCPClient({
    servers: {
      playwright: {
        //url: new URL("http://localhost:8931/sse"),
        command: "npx",
        args: ["@playwright/mcp"],
      },
      "perplexity-ask": {
        command: "npx",
        args: ["-y", "server-perplexity-ask"],
        env: {
          PERPLEXITY_API_KEY: process.env.PERPLEXITY_API_KEY,
        },
      },
      "google-calendar": {
        command: "node",
        args: ["<absolute-path-to-project-folder>/build/index.js"],
      },
    },
  });

  const openai = createOpenAI({
    apiKey: process.env.OPENAI_API_KEY!,
  });

  app.post("/api/ask", async (req: Request, res: Response) => {
    const { prompt } = req.body;
    if (!prompt) {
      res.status(400).json({ error: "Prompt is required" });
    }

    try {
      const rawTools = await mcp.getTools();

      let wrappedTools = Object.fromEntries(
        Object.entries(rawTools).map(([name, tool]) => [
          name,
          {
            ...tool,
            execute: async (input: any) => {
              console.log(`üîß [Tool: ${name}] Input:`, JSON.stringify(input));
              const result = await tool.execute(input);
              console.log(`‚úÖ [Tool: ${name}] Output:`, result);
              return result;
            },
          },
        ])
      );

      const agent = new Agent({
        name: "Playwright Gcal Agent",
        tools: wrappedTools,
        instructions: `
        Playwright„Çí‰Ωø„Å£„Å¶URL„ÇíËß£Êûê„Åó„ÄÅPerplexity„ÅßÊ§úÁ¥¢„Åó„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÊÑèÂõ≥„Å´Âêà„ÅÜÊúÄÊñ∞„ÅÆÊÉÖÂ†±„ÇíÂèéÈõÜ„Åó„Åæ„Åô„ÄÇ
        
        ### „Çπ„ÉÜ„ÉÉ„ÉóÊåáÈáùÔºö
        1. „É¶„Éº„Ç∂„Éº„ÅÆÁõÆÁöÑ„Å´Âøú„Åò„Å¶„ÄÅÂøÖË¶Å„Åß„ÅÇ„Çå„Å∞Playwright„ÅßÂÆüÈöõ„ÅÆ„Éö„Éº„Ç∏„Å´„Ç¢„ÇØ„Çª„Çπ„Åó„Å¶Ê§úË®º„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        2. Perplexity„ÅßÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        3. ÊúÄÁµÇÁöÑ„Å´„ÄÅÂæó„Çâ„Çå„Åü„Çø„Ç§„Éà„É´„Å®ÂÜÖÂÆπ„ÇíÊåáÂÆö„Åï„Çå„Åügoogle„Ç´„É¨„É≥„ÉÄ„Éº„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„Å´ÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        

        Âá∫ÂäõÔºö
        - „É™„Çπ„Éà„Ç¢„ÉÉ„Éó„Åó„Åü„Éá„Éº„Çø„ÇíÂá∫Âäõ
        - ÂÖ®ÈÉ®Êó•Êú¨Ë™û
        `,
        model: openai("gpt-4.1-mini"),
      });

      const result = await agent.generate([{ role: "user", content: prompt }], {
        experimental_output: schema,
      });
      console.log(result.object);
      res.json(result.object);
    } catch (err) {
      res.json(err);
      console.error(err);
      res.status(500).json({ error: "Error generating response" });
    } finally {
      // Êé•Á∂ö„ÇíÊòéÁ§∫ÁöÑ„Å´ÁµÇ‰∫Ü
      console.log("Disconnecting from MCP...");
      await mcp.disconnect();
    }
  });

  app.listen(4000, () => {
    console.log("‚úÖ Express API server is running on http://localhost:4000");
  });
}

// Call main()
main().catch((err) => {
  console.error("‚ùå Failed to start server:", err);
});
